Title: Update to v4

----

Intro: Learn how to upgrade a Kirby 3 project to Kirby 4.

----

Text:


<warning>
While we try to make sure, upgrading to Kirby 4 will be rather smooth for you, there are always things that can go wrong during such a process. Please **make a backup** of your site in any case.
</warning>

## Requirements

#### PHP
Kirby 4 now requires PHP 8.1+. Please check if your server supports this PHP version before upgrading.

#### Browser support of the Panel

The Panel in Kirby 4 supports the following modern browser versions:

<div class="table">
    <table>
        <tr>
            <th>Desktop</th>
            <th>Mobile</th>
        </tr>
        <tr>
            <td class="prose">
                <ul>
                    <li>Firefox 110+</li>
                    <li>Chrome 106+</li>
                    <li>Safari 15+</li>
                    <li>Edge 106+</li>
                    <li>Opera 94+</li>
                </ul>
            </td>
            <td class="prose">
                <ul>
                    <li>Mobile Safari 15+</li>
                    <li>Android Browser 117+</li>
                    <li>Chrome for Android 117+</li>
                </ul>
            </td>
        </tr>
    </table>
</div>

## For site developers

This guide highlights some of the key changes required when upgrading to Kirby 4. There can be further smaller breaking changes affecting your specific project. Please have a look at the (link: releases/4.0/#breaking-changes text: full list of breaking changes).

### Compatible plugins

To see which of the plugins you use already supports Kirby 4, have a look at this (link: plugins/v4 text: list of v4 compatible plugins).

### Core features replacing plugins

Kirby 4 includes some features natively that so far were provided by plugins. For some sites, this wil allow them to remove the plugin and rely purely on the native feature. It's important that you carefully check whether the core features really covers the full extend of what your project requires. Otherwise, sticking with the plugin might still be the necessary choice.

- (link: docs/reference/panel/fields/link text: Link field)
- (link: docs/reference/panel/fields/color text: Color field)
- (link: ocs/guide/content/publishing-workflow#moving-pages text: Moving pages in the Panel)
- (link: docs/reference/panel/blueprints/file#optimize-uploaded-images text: Optimize images on upload)
- (link: docs/guide/files/files#setting-a-focus-point text: Setting an image focus point)
- (link: docs/reference/plugins/extensions/blocks#quick-and-easy-fields-preview text: Fields preview for blocks)
- (link: docs/reference/panel/blueprints/page#page-creation-dialog text: Custom fields in the page create dialog)
- (link: docs/reference/panel/sections/pages#filtering-pages__query text: Query support for pages and files sections)
- (link: docs/guide/languages/custom-language-variables#language-editor-in-the-panel text: Translate i18n strings in the Panel)
- (link: docs/reference/objects/image/qr-code text: Generate a QR code)

### PHP type hints

We have added a lot more (link: https://www.php.net/manual/en/language.types.declarations.php text: PHP type hints) throughout the system (e.g. for paramters, what methods return). This strictness really reduces the risk of errors in our PHP code. As consequence, when extending core classes, e.g. in a custom page model, you will have to add some of these type hints to your code as well.

A common example for an error you could see with your v3 code in v4 is

```
Declaration of BlogPage::children() must be compatible with Kirby\Cms\Page::children(): Kirby\Cms\Pages
```

What this means is that you have a custom page `blog` model that overwrites the default `children()` method, e.g.

```php
class BlogPage extends Page
{
	public function children()
	{
		// ...
	}
```

What the error message is expressin is that it misses the return type for a `Pages` object, which we have added to the core. To fix the error message, you have to add this type hint to your code as well:

```php
use Kirby\Cms\Pages;

class BlogPage extends Page
{
	public function children(): Pages
	{
		// ...
	}
```

Depending on what of the core code you extend in your site, you might run into similar error messages. Have a close look at the error message and it will tell you which part is affected, so that you can compare it with the core code and spot what type hints need to be added.

### Permissions of almighty `kirby` user

```php
$kirby->impersonate('kirby')
```

In v3, the almighty `kirby` user wasn't that almighty but still restricted by the permissions of the admin role. In v4, it is truly almighty and not bound to any restrictions. Use where needed with caution.


## For plugin developers

### Panel: new look

The v4 Panel comes in a fresh look. Using core UI components will help you to automatically fit in with your plugins. But we have also opened up (link: https://lab.getkirby.com/public/lab/basics/design text: our design system), so you can make use of it as we do.

### UI docs and lab

The Panel UI components have been a pain point in v3 as they often were quite undocumented and unstable. v4 takes a big step here by introducing (link: https://lab.getkirby.com/public/lab/docs text: live Panel UI docs) as well as a (link: https://lab.getkirby.com/public/lab text: Lab with many examples) how to use the components. This has helped us to mature our components and will allow us to handle breaking changes of UI components with the same caution as how we've already treated them in the PHP backend.

When migrating from v3 to v4 with your plugins, you might encounter situations where previous usage of UI components broke. Please take a look at the Lab examples and feel free to reach out to the team to set them up for v4.

### New `panel` JavaScript API

We added a new Panel JavaScript API that gives you access to the most important Panel features: Control dialogs, drawers, notifications and more from your plugins, your custom panel.js or even the console. Explore (link: https://lab.getkirby.com/public/lab/internals/panel text: examples of the various interfaces) in the Lab.